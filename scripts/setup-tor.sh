#!/bin/bash
# scripts/setup-tor.sh
# Automated Tor hidden service setup for Bisq Support Agent
# Usage: sudo ./setup-tor.sh

set -euo pipefail

# Source library functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
# shellcheck disable=SC1091
source "$SCRIPT_DIR/lib/common.sh"

# Initialize colors and environment
setup_colors
init_common_env

display_banner "Bisq Support Agent - Tor Hidden Service Setup"

# Check if running as root
if ! check_root; then
    log_error "This script must be run as root"
    exit 1
fi

# Detect OS and install Tor
install_tor() {
    log_info "[1/6] Installing Tor..."

    if [ -f /etc/debian_version ]; then
        apt update
        apt install -y tor tor-geoipdb torsocks netstat-nat
    elif [ -f /etc/redhat-release ]; then
        yum install -y epel-release
        yum install -y tor torsocks net-tools
    else
        log_error "Unsupported OS"
        exit 1
    fi

    log_success "Tor installed successfully"
}

# Configure Tor hidden service with security hardening
configure_hidden_service() {
    log_info "[2/6] Configuring Tor hidden service..."

    local TOR_CONFIG="/etc/tor/torrc"
    local BACKUP_FILE="${TOR_CONFIG}.backup-$(date +%Y%m%d%H%M%S)"

    # Backup existing configuration
    if [ -f "$TOR_CONFIG" ]; then
        cp "$TOR_CONFIG" "$BACKUP_FILE"
        log_info "Backed up existing config to: $BACKUP_FILE"
    fi

    # Write hardened Tor configuration
    cat > "$TOR_CONFIG" << 'EOF'
## Bisq Support Agent - Secure Tor Hidden Service Configuration
## Auto-generated by setup-tor.sh

User debian-tor
DataDirectory /var/lib/tor
Log notice syslog

# Control port for monitoring
ControlPort 9051
CookieAuthentication 1
CookieAuthFileGroupReadable 1

# Primary Hidden Service
HiddenServiceDir /var/lib/tor/bisq-support/
HiddenServicePort 80 127.0.0.1:80
HiddenServiceVersion 3
HiddenServiceDirGroupReadable 0

# Security hardening
NumEntryGuards 3
MaxCircuitDirtiness 600
NewCircuitPeriod 30

# Stream isolation
IsolateDestAddr 1
IsolateDestPort 1
IsolateClientProtocol 1

# SOCKS proxy with isolation
SocksPort 9050 IsolateDestAddr IsolateDestPort
SocksPort 9052 IsolateDestAddr IsolateDestPort  # For external API calls

# DNS leak prevention
DNSPort 5353
AutomapHostsOnResolve 1
VirtualAddrNetworkIPv4 10.192.0.0/10

# Disable IPv6 (reduce attack surface)
ClientUseIPv6 0

# Connection padding
ConnectionPadding 1

# Disable exit functionality
ExitPolicy reject *:*

# DoS protection
HiddenServiceMaxStreams 100
HiddenServiceMaxStreamsCloseCircuit 1
HiddenServiceNumIntroductionPoints 5

# Safe logging
SafeLogging 1
HeartbeatPeriod 1 hour

# Bandwidth limits
RelayBandwidthRate 10 MBytes
RelayBandwidthBurst 20 MBytes
EOF

    chmod 644 "$TOR_CONFIG"
    log_success "Tor configuration updated with security hardening"
}

# Apply systemd hardening
apply_systemd_hardening() {
    log_info "[3/6] Applying systemd hardening..."

    local SYSTEMD_OVERRIDE_DIR="/etc/systemd/system/tor.service.d"
    local HARDENING_FILE="${SYSTEMD_OVERRIDE_DIR}/hardening.conf"

    # Create override directory
    mkdir -p "$SYSTEMD_OVERRIDE_DIR"

    # Copy hardening configuration
    if [ -f "$SCRIPT_DIR/templates/tor-systemd-hardening.conf" ]; then
        cp "$SCRIPT_DIR/templates/tor-systemd-hardening.conf" "$HARDENING_FILE"
        chmod 644 "$HARDENING_FILE"
        log_success "Systemd hardening applied: $HARDENING_FILE"
    else
        log_warning "Hardening template not found, skipping systemd hardening"
    fi
}

# Start Tor and generate .onion address
start_tor_service() {
    log_info "[4/6] Starting Tor service..."

    systemctl daemon-reload
    systemctl restart tor
    systemctl enable tor

    # Wait for Tor to start
    sleep 5

    if systemctl is-active --quiet tor; then
        log_success "Tor service started successfully"
    else
        log_error "Tor service failed to start"
        journalctl -u tor --no-pager -n 50
        exit 1
    fi
}

# Get generated .onion address and update environment
configure_environment() {
    log_info "[5/6] Configuring .onion address..."

    local HIDDEN_SERVICE_DIR="/var/lib/tor/bisq-support"
    local ENV_FILE="$INSTALL_DIR/docker/.env"

    # Wait for .onion address generation (max 60 seconds)
    local ONION_ADDRESS=""
    for i in {1..60}; do
        if [ -f "${HIDDEN_SERVICE_DIR}/hostname" ]; then
            ONION_ADDRESS=$(cat "${HIDDEN_SERVICE_DIR}/hostname")
            log_success "Generated .onion address: ${GREEN}${ONION_ADDRESS}${NC}"
            break
        fi
        echo -n "."
        sleep 1
    done

    if [ -z "${ONION_ADDRESS}" ]; then
        log_error "Failed to generate .onion address"
        exit 1
    fi

    # Update environment file
    if [ -f "$ENV_FILE" ]; then
        # Backup current .env
        cp "$ENV_FILE" "${ENV_FILE}.pre-tor"

        # Update or add TOR_HIDDEN_SERVICE
        if grep -q "^TOR_HIDDEN_SERVICE=" "$ENV_FILE"; then
            sed -i "s|^TOR_HIDDEN_SERVICE=.*|TOR_HIDDEN_SERVICE=${ONION_ADDRESS}|" "$ENV_FILE"
        else
            echo "TOR_HIDDEN_SERVICE=${ONION_ADDRESS}" >> "$ENV_FILE"
        fi

        # Update CORS_ORIGINS to include .onion
        if grep -q "^CORS_ORIGINS=" "$ENV_FILE"; then
            CURRENT_CORS=$(grep "^CORS_ORIGINS=" "$ENV_FILE" | cut -d= -f2-)
            if [[ ! "$CURRENT_CORS" =~ \.onion ]]; then
                NEW_CORS="${CURRENT_CORS},http://${ONION_ADDRESS}"
                sed -i "s|^CORS_ORIGINS=.*|CORS_ORIGINS=${NEW_CORS}|" "$ENV_FILE"
            fi
        fi

        log_success "Environment file updated: $ENV_FILE"
    else
        log_warning "Environment file not found: $ENV_FILE"
        log_warning "Manual configuration required"
    fi

    # Create nginx Tor support configuration
    log_info "Creating nginx Tor support configuration..."
    local NGINX_TOR_CONF="$INSTALL_DIR/docker/nginx/conf.d/tor-support.conf"
    local NGINX_TOR_HEADERS="$INSTALL_DIR/docker/nginx/conf.d/snippets/tor-headers.conf"

    # Create main Tor configuration with map directive
    cat > "$NGINX_TOR_CONF" << EOF
# Tor support configuration - Auto-generated by setup-tor.sh
# Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

# Map to create Onion-Location header value
# This advertises the .onion alternative to Tor Browser users
map \$http_host \$onion_location {
    default "http://${ONION_ADDRESS}\$request_uri";
}
EOF

    # Update tor-headers snippet to actually add the header
    cat > "$NGINX_TOR_HEADERS" << EOF
# Tor-specific headers - Auto-generated by setup-tor.sh
# Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

# Advertise .onion alternative to Tor Browser users
# The \$onion_location variable is defined in tor-support.conf
add_header Onion-Location \$onion_location always;
EOF

    log_success "Nginx Tor configuration created: $NGINX_TOR_CONF"
    log_success "Nginx Tor headers updated: $NGINX_TOR_HEADERS"
}

# Backup hidden service keys
backup_keys() {
    log_info "[6/7] Backing up hidden service keys..."

    local HIDDEN_SERVICE_DIR="/var/lib/tor/bisq-support"
    local BACKUP_DIR="$INSTALL_DIR/backups/tor-keys"
    local TIMESTAMP=$(date +%Y%m%d_%H%M%S)

    mkdir -p "$BACKUP_DIR"
    cp -r "${HIDDEN_SERVICE_DIR}/." "${BACKUP_DIR}/initial-keys-${TIMESTAMP}/"
    chmod 700 "$BACKUP_DIR"
    chmod 600 "${BACKUP_DIR}/initial-keys-${TIMESTAMP}"/*

    log_success "Keys backed up to: ${BACKUP_DIR}/initial-keys-${TIMESTAMP}/"
    log_error "âš  CRITICAL: Store these keys securely!"
    log_warning "   Loss of keys = permanent .onion address change"
}

# Verify installation
verify_installation() {
    log_info "[7/7] Verifying installation..."

    local CHECKS_PASSED=0
    local CHECKS_TOTAL=5

    # Check 1: Tor service running
    if systemctl is-active --quiet tor; then
        log_success "Tor service is running"
        ((CHECKS_PASSED++))
    else
        log_error "Tor service is not running"
    fi

    # Check 2: .onion address exists
    if [ -f "/var/lib/tor/bisq-support/hostname" ]; then
        log_success ".onion address generated"
        ((CHECKS_PASSED++))
    else
        log_error ".onion address not found"
    fi

    # Check 3: SOCKS proxy listening
    if netstat -tuln 2>/dev/null | grep -q ":9050" || ss -tuln 2>/dev/null | grep -q ":9050"; then
        log_success "SOCKS proxy listening on port 9050"
        ((CHECKS_PASSED++))
    else
        log_error "SOCKS proxy not accessible"
    fi

    # Check 4: Correct permissions
    local HS_PERMS=$(stat -c "%a" /var/lib/tor/bisq-support 2>/dev/null || stat -f "%OLp" /var/lib/tor/bisq-support 2>/dev/null || echo "000")
    if [ "$HS_PERMS" = "700" ]; then
        log_success "Hidden service directory permissions correct (700)"
        ((CHECKS_PASSED++))
    else
        log_error "Incorrect permissions: $HS_PERMS (should be 700)"
    fi

    # Check 5: No Tor warnings in logs
    local WARNINGS=$(journalctl -u tor --since "5 minutes ago" 2>/dev/null | grep -i "warn" | wc -l || echo "0")
    if [ "$WARNINGS" -eq 0 ]; then
        log_success "No warnings in Tor logs"
        ((CHECKS_PASSED++))
    else
        log_warning "Found $WARNINGS warnings in Tor logs"
    fi

    echo ""
    log_info "=== Verification Complete: $CHECKS_PASSED/$CHECKS_TOTAL checks passed ==="

    if [ $CHECKS_PASSED -eq $CHECKS_TOTAL ]; then
        log_success "All checks passed!"
    else
        log_warning "Some checks failed. Review logs: journalctl -u tor"
    fi
}

# Main execution
main() {
    install_tor
    configure_hidden_service
    apply_systemd_hardening
    start_tor_service
    configure_environment
    backup_keys
    verify_installation

    local ONION_ADDR=$(cat /var/lib/tor/bisq-support/hostname 2>/dev/null || echo "ERROR")

    echo ""
    log_success "=== Setup Complete ==="
    log_info "Your .onion address: ${GREEN}${ONION_ADDR}${NC}"
    echo ""
    log_info "Next steps:"
    echo "  1. Configure nginx for Tor support"
    echo "  2. Update application to use Tor proxy for external APIs"
    echo "  3. Restart services: cd $INSTALL_DIR/scripts && ./restart.sh"
    echo "  4. Test .onion access: torsocks curl http://${ONION_ADDR}/health"
    echo ""
    log_error "IMPORTANT: Backup keys are in $INSTALL_DIR/backups/tor-keys/"
}

main "$@"
