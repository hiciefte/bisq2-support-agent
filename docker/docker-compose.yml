version: '3.8'

services:
  # Nginx reverse proxy for web frontend only
  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
    depends_on:
      web:
        condition: service_healthy
    networks:
      - bisq-support-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # API backend
  api:
    build:
      context: ..
      dockerfile: docker/api/Dockerfile
      args:
        - BUILD_ENV=production
    restart: always
    volumes:
      - ../api/app:/app/app # Mount the app directory for development
      - ../api/data:/data # Mount the data directory
    environment:
      # Only Docker-specific overrides here
      - ENVIRONMENT=production # Environment-specific setting
      # Include API keys - these need to be explicitly included to be passed to container
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - MAX_TOKENS=${MAX_TOKENS}
      - XAI_API_KEY=${XAI_API_KEY}
      - XAI_MODEL=${XAI_MODEL}
      - XAI_API_BASE_URL=${XAI_API_BASE_URL}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - DATA_DIR=${DATA_DIR}
    expose:
      - "8000"
    networks:
      - bisq-support-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Web frontend
  web:
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
      args:
        - BUILD_ENV=production
    restart: always
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_API_URL=/api # Production-specific for Nginx routing
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - bisq-support-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${EXPOSE_PROMETHEUS_PORT:-9090}:9090"
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-securepassword}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
    ports:
      - "${EXPOSE_GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Node exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - "9100"
    networks:
      - bisq-support-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # Data ingestion - FAQ Extractor
  faq-extractor:
    build:
      context: ..
      dockerfile: docker/api/Dockerfile
    restart: on-failure
    command: [ "python", "-m", "app.scripts.extract_faqs" ]
    volumes:
      - ../api/data:/app/api/data
    environment:
      - DATA_DIR=${DATA_DIR}
      - BISQ_API_URL=http://host.docker.internal:8090 # Updated Docker network address
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - MAX_TOKENS=${MAX_TOKENS}
    depends_on:
      - api
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  feedback-processor:
    build:
      context: ..
      dockerfile: docker/api/Dockerfile
    command: [ "python", "-m", "app.scripts.process_feedback" ]
    volumes:
      - ../api/data:/app/api/data # Match the API service volume mount
    environment:
      - DATA_DIR=${DATA_DIR}
    depends_on:
      - api
    networks:
      - bisq-support-network

  # Scheduler for periodic tasks
  scheduler:
    image: alpine:latest
    restart: always
    volumes:
      - ./scripts:/scripts:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/cron:/var/log/cron
    command: >
      sh -c "
        apk add --no-cache docker-cli docker-compose bash coreutils &&
        chmod +x /scripts/update-faqs.sh &&
        chmod +x /scripts/process-feedback.sh &&
        mkdir -p /var/log/cron &&
        echo '0 0 * * 0 /scripts/update-faqs.sh >> /var/log/cron/faqs.log 2>&1' > /etc/crontabs/root &&
        echo '0 0 * * 1 /scripts/process-feedback.sh >> /var/log/cron/feedback.log 2>&1' >> /etc/crontabs/root &&
        # Run scripts on startup
        echo \"[$(date)] Running initial FAQ update on startup...\" &&
        /scripts/update-faqs.sh >> /var/log/cron/faqs.log 2>&1 &&
        echo \"[$(date)] Running initial feedback processing on startup...\" &&
        /scripts/process-feedback.sh >> /var/log/cron/feedback.log 2>&1 &&
        # Start cron daemon
        crond -f -d 8
      "
    depends_on:
      - api
      - faq-extractor
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  prometheus-data:
  grafana-data:
  web_node_modules:
    name: bisq2-web-node-modules

networks:
  bisq-support-network:
    driver: bridge
