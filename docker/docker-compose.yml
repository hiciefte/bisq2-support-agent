services:
  # Nginx reverse proxy for web frontend only
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    environment:
      - API_URL=${API_URL:-/api} # For CSP configuration
    volumes:
      # Mount production config (with security headers enabled)
      - ./nginx/conf.d/default.prod.conf:/etc/nginx/conf.d/default.conf:ro
      # Mount other config files and snippets
      - ./nginx/conf.d/snippets:/etc/nginx/conf.d/snippets:ro
      - ./nginx/conf.d/tor-support.conf.template:/etc/nginx/conf.d/tor-support.conf.template:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/error_pages:/usr/share/nginx/html/error_pages:ro
      # Mount maintenance page
      - ./maintenance/maintenance.html:/usr/share/nginx/html/maintenance.html:ro
    ports:
      # Bind to all interfaces for clearnet and Tor access
      - "0.0.0.0:80:80"
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - bisq-support-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    # Security hardening
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run
      - /var/cache/nginx
      - /tmp

  # Bisq2 API service
  bisq2-api:
    build:
      context: ./bisq2-api
      dockerfile: Dockerfile
      args:
        # Optional: uncomment and set if you need a different branch/repo
        # BISQ2_BRANCH: add-support-api
        # BISQ2_REPO_URL: https://github.com/hiciefte/bisq2.git
        APP_UID: 1001 # Match host user UID if needed for volume permissions
        APP_GID: 1001 # Match host user GID if needed for volume permissions
    restart: always
    volumes:
      - bisq2-data:/opt/bisq2/data
    environment:
      - BISQ_DATA_DIR=/opt/bisq2/data
      - JAVA_OPTS=-Xmx1g
    expose:
      - "8090"
    networks:
      - bisq-support-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/api/v1/support/export" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    cap_add:
      - NET_ADMIN
    security_opt:
      - seccomp:unconfined

  # API backend
  api:
    build:
      context: ..
      dockerfile: docker/api/Dockerfile
      args:
        - BUILD_ENV=production
        - APP_UID=${APP_UID:-1001}
        - APP_GID=${APP_GID:-1001}
    restart: unless-stopped
    volumes:
      - ../api/app:/app/app # Mount the app directory for development
      - ../api/data:/data # Mount the data directory
      # Named volume disabled: causes permission issues in local dev (root:root ownership)
      # - feedback-data:/data/feedback # Named volume for persistent feedback storage
    environment:
      # Only Docker-specific overrides here
      - ENVIRONMENT=production # Environment-specific setting
      # OpenAI API configuration (used by AISuite for LLM and embeddings)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - MAX_TOKENS=${MAX_TOKENS}
      # Admin and security configuration
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - COOKIE_SECURE=${COOKIE_SECURE}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - DATA_DIR=${DATA_DIR:-/data}
      - BISQ_API_URL=${BISQ_API_URL:-http://bisq2-api:8090} # URL for the containerized Bisq2 API service
      # Tor hidden service configuration
      - TOR_HIDDEN_SERVICE=${TOR_HIDDEN_SERVICE}
      # Privacy and security settings
      - DATA_RETENTION_DAYS=${DATA_RETENTION_DAYS:-30}
      - SUPPORT_AGENT_NICKNAMES=${SUPPORT_AGENT_NICKNAMES}
      - ENABLE_PRIVACY_MODE=${ENABLE_PRIVACY_MODE:-true}
      - PII_DETECTION_ENABLED=${PII_DETECTION_ENABLED:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    expose:
      - "8000"
    networks:
      - bisq-support-network
    healthcheck:
      # Use localhost for more reliable health checking during startup
      test: [ "CMD", "curl", "-fsS", "--max-time", "5", "http://localhost:8000/health" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    # Security hardening
    cap_drop:
      - ALL
    cap_add:
      - CHOWN        # Required for entrypoint to fix file ownership
      - DAC_OVERRIDE # Required for entrypoint to bypass permission checks
      - SETGID       # Required for gosu to switch group
      - SETUID       # Required for gosu to switch user
    security_opt:
      - no-new-privileges:true

  # Web frontend
  web:
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
      args:
        - BUILD_ENV=production
        - NEXT_PUBLIC_API_URL=/api
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_API_URL=/api # Production-specific for Nginx routing
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    command: npm run start
    depends_on:
      api:
        condition: service_healthy
    networks:
      - bisq-support-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    # Security hardening
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
      - ../runtime_secrets/prometheus_admin_key:/etc/prometheus/admin_key:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    expose:
      - "9090"
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-securepassword}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource
      - ADMIN_API_KEY_FOR_GRAFANA=${ADMIN_API_KEY}
    ports:
      - "${EXPOSE_GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Node exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - "9100"
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Scheduler for periodic tasks
  scheduler:
    image: alpine:latest
    restart: always
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - HEALTHCHECK_URL=${HEALTHCHECK_URL:-https://hc-ping.com/27867359-f4f3-4e22-8f46-8d18a73cf219}
    volumes:
      - ./scripts:/scripts:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/cron:/var/log/cron
    command: >
      sh -c "
        apk add --no-cache docker-cli docker-compose bash coreutils curl jq bc &&
        mkdir -p /var/log/cron &&
        # Add @reboot entries to run scripts once when crond starts
        echo '@reboot /scripts/update-faqs.sh >> /var/log/cron/faqs.log 2>&1' > /etc/crontabs/root &&
        echo '@reboot /scripts/process-feedback.sh >> /var/log/cron/feedback.log 2>&1' >> /etc/crontabs/root &&
        # Add regular cron entries
        echo '0 1 * * 0 /scripts/update-wiki.sh >> /var/log/cron/wiki.log 2>&1' >> /etc/crontabs/root &&
        echo '0 0 * * * /scripts/update-faqs.sh >> /var/log/cron/faqs.log 2>&1' >> /etc/crontabs/root &&
        echo '0 0 * * 1 /scripts/process-feedback.sh >> /var/log/cron/feedback.log 2>&1' >> /etc/crontabs/root &&
        echo '*/15 * * * * /scripts/rag-health-check.sh >> /var/log/cron/rag-health.log 2>&1' >> /etc/crontabs/root &&
        # Start cron daemon in foreground, logging verbosely to stderr (which goes to docker logs)
        crond -f -l 8 -d 8
      "
    depends_on:
      - api
      - prometheus
    networks:
      - bisq-support-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  prometheus-data:
  grafana-data:
  web_node_modules:
    name: bisq2-web-node-modules
  bisq2-data:
    name: bisq2-data
  feedback-data:
    name: bisq2-feedback-data
    driver: local

networks:
  bisq-support-network:
    driver: bridge
