server {
    listen 80;
    server_name _;  # Catch-all for IP-based access

    # Use Docker's internal DNS resolver
    # Resolves hostnames at request time instead of config load time
    # Prevents nginx from failing if upstreams are temporarily unreachable during deployment
    resolver 127.0.0.11 valid=10s;
    resolver_timeout 5s;

    # Onion-Location header will be added by tor-support.conf when Tor is enabled
    # This is handled in a separate configuration file to avoid nginx syntax errors
    # when TOR_HIDDEN_SERVICE environment variable is not set

    #------------------------------
    # .well-known Routes (Tor Verification)
    #------------------------------
    # Must come FIRST to match before / catches everything
    location /.well-known/ {
        proxy_pass http://api:8000/.well-known/;
        include /etc/nginx/conf.d/snippets/proxy-params.conf;
        # No auth required - public verification endpoint
        include /etc/nginx/conf.d/snippets/security-headers-api.conf;
    }

    #------------------------------
    # Frontend Web Application (Dynamic Next.js Pages)
    #------------------------------
    location / {
        limit_req zone=web burst=20 nodelay;

        set $web_upstream web:3000;
        proxy_pass http://$web_upstream;

        include /etc/nginx/conf.d/snippets/proxy-params.conf;
        include /etc/nginx/conf.d/snippets/connection-limits.conf;
        include /etc/nginx/conf.d/snippets/session-management.conf;
        # Include Onion-Location header if Tor is configured
        include /etc/nginx/conf.d/snippets/tor-headers.conf;
        # Include security headers for web pages
        # include /etc/nginx/conf.d/snippets/security-headers-web.conf;

        # Disable buffering to support streaming responses
        proxy_buffering off;
        # Disable gzip compression for dynamic content (to avoid conflicts)
        gzip off;

        # Show maintenance page if backend is unavailable
        error_page 502 503 504 = @maintenance;
    }

    # Handle Next.js development server WebSocket for Hot Module Replacement
    location /_next/webpack-hmr {
        set $web_upstream web:3000;
        proxy_pass http://$web_upstream/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    #------------------------------
    # Static Assets (Next.js, /_next/)
    #------------------------------
    location /_next/ {
        limit_req zone=static burst=30 nodelay;

        set $web_upstream web:3000;
        proxy_pass http://$web_upstream;

        include /etc/nginx/conf.d/snippets/proxy-params.conf;
        # Include web security headers here as well if desired
        # include /etc/nginx/conf.d/snippets/security-headers-web.conf;

        # Enable buffering so that a full response is assembled
        proxy_buffering on;
        chunked_transfer_encoding off;
        gzip off;
    }

    #------------------------------
    # API Health Check (Internal Only)
    #------------------------------
    # Restrict health check endpoints to internal networks only
    # This prevents resource monitoring reconnaissance by external actors
    # API supports: /health, /health/ready, /health/live
    location ~ ^/api/health(/ready|/live)?$ {
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        deny all;
        access_log off;

        proxy_pass http://api:8000/health$1;
        include /etc/nginx/conf.d/snippets/proxy-params.conf;
    }

    #------------------------------
    # API Backend
    #------------------------------
    location /api/ {
        limit_req zone=api burst=20 nodelay;

        # Strip /api/ prefix and preserve the rest of the URI
        rewrite ^/api/(.*)$ /$1 break;

        proxy_pass http://api:8000;

        include /etc/nginx/conf.d/snippets/proxy-params.conf;
        include /etc/nginx/conf.d/snippets/connection-limits.conf;
        # Session management removed - API uses token auth, Tor Browser blocks cookies on subresources
        # Apply API-specific security headers
        include /etc/nginx/conf.d/snippets/security-headers-api.conf;
    }

    #------------------------------
    # API Admin - Public Endpoints
    #------------------------------
    # Admin management endpoints - accessible via Tor and developer IP
    location ~ ^/api/admin/(faqs|feedback|dashboard|auth)(/.*)?$ {
        # Strict rate and connection limits for admin endpoints
        # Increased for Tor exit node IP sharing (50 concurrent connections)
        limit_req zone=admin burst=5 nodelay;
        limit_conn addr 50;

        proxy_pass http://api:8000/admin/$1$2$is_args$args;
        include /etc/nginx/conf.d/snippets/proxy-params.conf;
        # Use the API security headers for admin endpoints
        include /etc/nginx/conf.d/snippets/security-headers-api.conf;
    }


    #------------------------------
    # API Admin - Internal Only
    #------------------------------
    # All other admin endpoints - internal only
    location /api/admin/ {
        # Strict rate and connection limits for admin endpoints
        # Increased for Tor exit node IP sharing (50 concurrent connections)
        limit_req zone=admin burst=5 nodelay;
        limit_conn addr 50;

        allow 127.0.0.1;
        allow 172.16.0.0/12;
        deny all;

        proxy_pass http://api:8000/admin/;
        include /etc/nginx/conf.d/snippets/proxy-params.conf;
        # Use the API security headers for admin endpoints (or a specialized snippet if needed)
        include /etc/nginx/conf.d/snippets/security-headers-api.conf;
    }

    #------------------------------
    # Grafana Dashboard
    #------------------------------
    location /grafana/ {
        limit_req zone=grafana burst=10 nodelay;

        set $grafana_upstream grafana:3000;
        proxy_pass http://$grafana_upstream/;

        include /etc/nginx/conf.d/snippets/proxy-params.conf;
        include /etc/nginx/conf.d/snippets/connection-limits.conf;
        # Apply API-like security headers for Grafana (adjust as needed)
        include /etc/nginx/conf.d/snippets/security-headers-api.conf;
    }

    #------------------------------
    # Health Check (Internal Only)
    #------------------------------
    location /health {
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        deny all;
        access_log off;
        add_header Content-Type application/json;
        return 200 '{
            "status": "healthy",
            "timestamp": "$time_iso8601",
            "server": "$hostname",
            "nginx_version": "$nginx_version"
        }';
    }

    #------------------------------
    # Custom Error Pages
    #------------------------------
    error_page 404 /error_pages/404.html;
    error_page 500 502 503 504 /error_pages/50x.html;
    error_page 403 /error_pages/403.html;
    error_page 429 /error_pages/429.html;

    location = /error_pages/429.html {
        internal;
        add_header Retry-After 30;
        return 429 '{"error": "Too many requests. Please try again later.", "retry_after": 30}';
    }

    # Large uploads configuration
    client_max_body_size 100M;

    # Logging settings
    error_log /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log combined buffer=256k flush=30s;

    #------------------------------
    # Deny Access to Hidden and Backup Files
    #------------------------------
    # Deny access to dotfiles EXCEPT .well-known (used for Tor verification)
    location ~ /\.(?!well-known) {
        deny all;
        access_log off;
        log_not_found off;
    }
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    #------------------------------
    # Maintenance Page Handler
    #------------------------------
    # Serves static maintenance page when backend services are unavailable
    location @maintenance {
        root /usr/share/nginx/html;
        rewrite ^ /maintenance.html break;
        internal;
    }

    # Serve maintenance page file
    location = /maintenance.html {
        root /usr/share/nginx/html;
        internal;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
}
